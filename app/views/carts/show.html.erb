<h1>Meu Carrinho</h1>

<% if @cart.cart_items.empty? %>
  <p>Seu carrinho está vazio.</p>
  <%= link_to "Continuar Comprando", root_path %>
<% else %>
  <table>
    <thead>
      <tr>
        <th>Produto</th>
        <th>Quantidade</th>
        <th>Preço Unitário</th>
        <th>Subtotal</th>
        <th>Ações</th>
      </tr>
    </thead>
    <tbody>
      <% @cart.cart_items.each do |item| %>
        <tr>
          <td><%= item.produto.name %></td>
          <td><%= item.quantidade %></td>
          <td>R$ <%= item.produto.preco %></td>
          <td>R$ <%= item.quantidade * item.produto.preco %></td>
          <td>
            <%= button_to "Remover", remove_item_cart_path(item_id: item.id), method: :delete %>
          </td>
        </tr>
      <% end %>
    </tbody>
    <tfoot>
      <tr>
        <td colspan="3"><strong>Total:</strong></td>
        <td colspan="2"><strong>R$ <%= @cart.total %></strong></td>
      </tr>
    </tfoot>
  </table>

  <div>
    <% if user_signed_in? %>
      <%= button_to "Finalizar Compra", pagamento_show_path, method: :get %>
    <% else %>
      <p>
        Para finalizar a compra, você precisa fazer login.
        <%= link_to "Fazer Login", new_user_session_path %>
      </p>
    <% end %>
  </div>
<% end %> 
      <=%= if user_signed_in? %>
      
      <div id="cardPaymentBrick_container"></div>
      <script>
        # const mp = new MercadoPago('<%= ENV['PUBLIC_KEY'] %>'), {
        const mp = new MercadoPago('TEST-bd52f474-08c6-4b03-96cc-04460592d679', {
          locale: 'pt-BR'
        });
        const bricksBuilder = mp.bricks();
        const renderCardPaymentBrick = async (bricksBuilder) => {
          const settings = {
            initialization: {
              amount: 100, // valor total a ser pago
              payer: {
                email: "",
              },
            },
            customization: {
              visual: {
                style: {
                  theme: 'default', // | 'dark' | 'bootstrap' | 'flat'
                  customVariables: {
                  }
                }
              },
                paymentMethods: {
                  maxInstallments: 1,
                }
            },
            callbacks: {
              onReady: () => {
                // callback chamado quando o Brick estiver pronto
              },
              onSubmit: (cardFormData) => {
                //  callback chamado o usuário clicar no botão de submissão dos dados
                //  exemplo de envio dos dados coletados pelo Brick para seu servidor
                return new Promise((resolve, reject) => {
                  fetch("/process_payment", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify(cardFormData)
                  })
                    .then((response) => {
                      // receber o resultado do pagamento
                      resolve();
                    })
                    .catch((error) => {
                      // lidar com a resposta de erro ao tentar criar o pagamento
                      reject();
                    })
                });
              },
              onError: (error) => {
                // callback chamado para todos os casos de erro do Brick
              },
            },
          };
          window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);
        };
        renderCardPaymentBrick(bricksBuilder);
      </script>